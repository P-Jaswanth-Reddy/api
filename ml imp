# 🌸 Iris Flower Classification using Logistic Regression

# 📚 Import libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# 📥 Load dataset
df = sns.load_dataset('iris')

# 🔍 Explore data
print("First 5 rows:")
print(df.head())

print("\nDataset info:")
print(df.info())

print("\nClass distribution:")
print(df['species'].value_counts())

# 📊 Visualize relationships
sns.pairplot(df, hue='species')
plt.suptitle("Pairplot of Iris Features", y=1.02)
plt.show()

# 🧹 Prepare features and labels
X = df.drop('species', axis=1)
y = df['species']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 🤖 Train logistic regression model
model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

# 📈 Make predictions and evaluate
y_pred = model.predict(X_test)

print("\n✅ Accuracy:", accuracy_score(y_test, y_pred))
print("\n📝 Classification Report:\n", classification_report(y_test, y_pred))

# 🔲 Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, cmap="Blues", fmt='d',
            xticklabels=model.classes_, yticklabels=model.classes_)
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

print("\n📌 Done: Iris Classification Model Implemented and Evaluated.")
